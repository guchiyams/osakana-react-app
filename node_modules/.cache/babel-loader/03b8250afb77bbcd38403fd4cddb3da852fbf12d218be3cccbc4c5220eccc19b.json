{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { GoogleAuthProvider, getAuth, signInWithPopup, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut, applyActionCode, confirmPasswordReset, updatePassword } from \"firebase/auth\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBIs8MySWwUl72x5ivYkpsjEw9u0aZFzIM\",\n  authDomain: \"eguchishop-fish.firebaseapp.com\",\n  projectId: \"eguchishop-fish\",\n  storageBucket: \"eguchishop-fish.appspot.com\",\n  messagingSenderId: \"965541816870\",\n  appId: \"1:965541816870:web:61db2ec7bbb18c8184d4e7\"\n};\n\n// initialize firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n// const db = getFirestore(app);\n// const storage = getStorage(app);\n\n// Login function\nconst logInWithEmailAndPassword = async (email, password, setIncorrect) => {\n  try {\n    await signInWithEmailAndPassword(auth, email, password);\n  } catch (err) {\n    console.error(err);\n    setIncorrect(true);\n  }\n};\n\n// Register function with email/password\nconst registerWithEmailAndPassword = async (e, firstName, lastName, type, email, password, country, city, phoneNumber, hear, registerDate, accountMail, marketingMail) => {\n  try {\n    const res = await createUserWithEmailAndPassword(auth, email, password);\n    return res.user;\n  } catch (err) {\n    console.error(err.message);\n    //Email exists?\n    if (err.message = \"EMAIL_EXISTS\") return true;\n  }\n};\n\n// Logout function\nconst logout = () => {\n  signOut(auth);\n};\nexport { auth,\n// db,\n// storage,\nlogInWithEmailAndPassword, registerWithEmailAndPassword, logout };","map":{"version":3,"names":["initializeApp","GoogleAuthProvider","getAuth","signInWithPopup","signInWithEmailAndPassword","createUserWithEmailAndPassword","signOut","applyActionCode","confirmPasswordReset","updatePassword","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","auth","logInWithEmailAndPassword","email","password","setIncorrect","err","console","error","registerWithEmailAndPassword","e","firstName","lastName","type","country","city","phoneNumber","hear","registerDate","accountMail","marketingMail","res","user","message","logout"],"sources":["/Users/guchiyam/Desktop/PROJECTS/MOM_FISH/osakana-react-app/src/config/firebase-config.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport {\n  GoogleAuthProvider,\n  getAuth,\n  signInWithPopup,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut,\n  applyActionCode,\n  confirmPasswordReset,\n  updatePassword,\n} from \"firebase/auth\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBIs8MySWwUl72x5ivYkpsjEw9u0aZFzIM\",\n  authDomain: \"eguchishop-fish.firebaseapp.com\",\n  projectId: \"eguchishop-fish\",\n  storageBucket: \"eguchishop-fish.appspot.com\",\n  messagingSenderId: \"965541816870\",\n  appId: \"1:965541816870:web:61db2ec7bbb18c8184d4e7\"\n};\n\n// initialize firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n// const db = getFirestore(app);\n// const storage = getStorage(app);\n\n// Login function\nconst logInWithEmailAndPassword = async (email, password, setIncorrect) => {\n  try {\n    await signInWithEmailAndPassword(auth, email, password);\n  } catch (err) {\n    console.error(err);\n    setIncorrect(true);\n  }\n};\n\n// Register function with email/password\nconst registerWithEmailAndPassword = async(e, firstName, lastName, type, email, password, country, city, phoneNumber, hear, registerDate,  accountMail, marketingMail) => {\n  try {\n    const res = await createUserWithEmailAndPassword(auth, email, password);\n    return res.user;\n\n  } catch (err) {\n    console.error(err.message);\n    //Email exists?\n    if (err.message = \"EMAIL_EXISTS\") return true\n  }\n};\n\n// Logout function\nconst logout = () => {\n  signOut(auth);\n};\n\nexport {\n  auth,\n  // db,\n  // storage,\n  logInWithEmailAndPassword,\n  registerWithEmailAndPassword,\n  logout\n}; "],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,kBAAkB,EAClBC,OAAO,EACPC,eAAe,EACfC,0BAA0B,EAC1BC,8BAA8B,EAC9BC,OAAO,EACPC,eAAe,EACfC,oBAAoB,EACpBC,cAAc,QACT,eAAe;AACtB;AACA;;AAEA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,iCAAiC;EAC7CC,SAAS,EAAE,iBAAiB;EAC5BC,aAAa,EAAE,6BAA6B;EAC5CC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGjB,aAAa,CAACU,cAAc,CAAC;AACzC,MAAMQ,IAAI,GAAGhB,OAAO,CAACe,GAAG,CAAC;AACzB;AACA;;AAEA;AACA,MAAME,yBAAyB,GAAG,OAAOC,KAAK,EAAEC,QAAQ,EAAEC,YAAY,KAAK;EACzE,IAAI;IACF,MAAMlB,0BAA0B,CAACc,IAAI,EAAEE,KAAK,EAAEC,QAAQ,CAAC;EACzD,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClBD,YAAY,CAAC,IAAI,CAAC;EACpB;AACF,CAAC;;AAED;AACA,MAAMI,4BAA4B,GAAG,OAAMC,CAAC,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,IAAI,EAAEV,KAAK,EAAEC,QAAQ,EAAEU,OAAO,EAAEC,IAAI,EAAEC,WAAW,EAAEC,IAAI,EAAEC,YAAY,EAAGC,WAAW,EAAEC,aAAa,KAAK;EACxK,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMjC,8BAA8B,CAACa,IAAI,EAAEE,KAAK,EAAEC,QAAQ,CAAC;IACvE,OAAOiB,GAAG,CAACC,IAAI;EAEjB,CAAC,CAAC,OAAOhB,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAACiB,OAAO,CAAC;IAC1B;IACA,IAAIjB,GAAG,CAACiB,OAAO,GAAG,cAAc,EAAE,OAAO,IAAI;EAC/C;AACF,CAAC;;AAED;AACA,MAAMC,MAAM,GAAG,MAAM;EACnBnC,OAAO,CAACY,IAAI,CAAC;AACf,CAAC;AAED,SACEA,IAAI;AACJ;AACA;AACAC,yBAAyB,EACzBO,4BAA4B,EAC5Be,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}